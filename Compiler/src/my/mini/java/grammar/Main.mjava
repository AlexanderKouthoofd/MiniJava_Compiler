class Factorial {
    public static void main(String[] args)
    {
//        int[] a;
        boolean b;
        b = false;
//        a = new int[5];
//        a[0] = -10;
//        a[2] = 4;
//        b = a;
//        System.out.println(new Fac().ComputeFac(10));
        System.out.println(5 - 3 + 12 * 2);
        if (1 < 5)
            System.out.println(5 - 3 + 12 * 2);
    }
}

class Fac{

    public int ComputeFac(int num){
        int num_aux;
        int asd;
        F apple;

        apple = new F();
        asd = apple.hi();
        num_aux = 2;
        if (num < 1)
            num_aux = 1 ;
        else
            num_aux = num * (this.ComputeFac(num-1)) ;

        return num_aux;
    }

    public int[] other(int[] a)
    {
        return a;
    }

    public int hi()
    {
        return 1;
    }

    public int $operator +(Factorial f)
    {
        int a;
        a = 1;
        return a + 10;
    }
}

class F extends Fac {

    public boolean ComputeFac(int num){
        int num_aux;
        if (num < 1)
            num_aux = 1 ;
//        else
//            num_aux = num * (this.ComputeFac(num-1)) ;
//        return num_aux;
        return true;
    }

    public int F()
    {
        return 1;
    }

    public int F(Apple apple)
    {
        return 1;
    }

    public int F(int a)
    {
        return 1;
    }

    public int F(N a)
    {
        return 1;
    }

    public int $operator +(Fac f)
    {
        F fa;
        int a;
        fa = this;
        a = fa.hi();
        return a * (fa.F(1)) + 10;
    }

    public int $operator +(N f)
    {
        F fa;
        int a;
        fa = this;
        a = fa.hi();
        return a * (fa.F(1)) + 10;
    }

    public int $operator +(Factorial f)
    {
        F fa;
        int a;
        fa = this;
        a = fa.hi();
        return a * (fa.F(1)) + 10;
    }
}

class Apple extends F
{
    int[] variable;

    public boolean test()
    {
        F a;
        Fac ap;
        int[] num;
        num = variable;
        a = new F();
        ap = new Fac();
        return this.test();
    }

    public int one()
    {
        Fac thing;
        thing = new F();
        thing = new Apple();
        thing = new N();
        return ((this.two()).F());
    }

    public F two()
    {
        int[] arr;
        arr = new int[5];
        return (new F());
    }
}

class N extends Apple
{
    Apple a;

    public int random()
    {
        int num;
        Apple t;
        num = 5;
//        num = this.stuff(new Fac());
        variable = new int[num];
        t = new N();
        num = (t.two()).F();
        return 1;
    }

    public int stuff(Apple a)
    {
        return 1;
    }

    public int stuff()
    {
        return 1;
    }


    public int addAttempt()
    {
        F fa;
        F f;
        int num;
        f = new N();
        fa = new Apple();
        num = f + fa;
        return num;
    }
}
