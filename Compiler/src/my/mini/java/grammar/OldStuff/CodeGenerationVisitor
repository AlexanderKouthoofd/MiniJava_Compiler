package my.mini.java.compiler.AST;

import my.mini.java.compiler.AST.nodes.classes.ChildClassNode;
import my.mini.java.compiler.AST.nodes.classes.MainClassNode;
import my.mini.java.compiler.AST.nodes.classes.SimpleClassNode;
import my.mini.java.compiler.AST.nodes.formal_list.ParameterNode;
import my.mini.java.compiler.AST.nodes.literals.BooleanLiteralNode;
import my.mini.java.compiler.AST.nodes.literals.IdLiteralNode;
import my.mini.java.compiler.AST.nodes.literals.IntLiteralNode;
import my.mini.java.compiler.AST.nodes.methods.BasicMethodNode;
import my.mini.java.compiler.AST.nodes.methods.OverloadMethodNode;
import my.mini.java.compiler.AST.nodes.program.ProgramNode;
import my.mini.java.compiler.AST.nodes.statements.assertions.ArrayAssignAssertNode;
import my.mini.java.compiler.AST.nodes.statements.assertions.AssignAssertNode;
import my.mini.java.compiler.AST.nodes.statements.assertions.PrintAssertNode;
import my.mini.java.compiler.AST.nodes.statements.branches.IfBranchNode;
import my.mini.java.compiler.AST.nodes.statements.branches.LoopBranchNode;
import my.mini.java.compiler.AST.nodes.statements.branches.ScopeBranchNode;
import my.mini.java.compiler.AST.nodes.statements.branches.conditions.AndConditionNode;
import my.mini.java.compiler.AST.nodes.statements.branches.conditions.LessThanConditionNode;
import my.mini.java.compiler.AST.nodes.statements.branches.conditions.NestedConditionNode;
import my.mini.java.compiler.AST.nodes.statements.branches.conditions.NotConditionNode;
import my.mini.java.compiler.AST.nodes.statements.exprs.*;
import my.mini.java.compiler.AST.nodes.statements.exprs.atoms.*;
import my.mini.java.compiler.AST.nodes.statements.exprs.math.MinusMathNode;
import my.mini.java.compiler.AST.nodes.statements.exprs.math.MultMathNode;
import my.mini.java.compiler.AST.nodes.statements.exprs.math.PlusMathNode;
import my.mini.java.compiler.AST.nodes.variable.VarDeclarationNode;

import java.util.HashMap;

/**
 * Created by alex on 12/4/2016.
 */
public class CodeGenerationVisitor extends ASTVisitor<String>
{
    private StringBuilder program = new StringBuilder("");
    private String commentSpaces = "                                                    ";
    private HashMap<String, Integer> variables = new HashMap<>();
    private int elseCount = 0;
    private int finallyCount = 0;
    private int nestedCount = -1;
    private int nFinallyCount = -1;

    @Override
    public String visit(ProgramNode node)
    {
        program.append(visit(node.mainClassNode));
        node.classNodes.forEach(classNode -> program.append(visit(classNode)));
        return program.toString();
    }

    @Override
    public String visit(MainClassNode node)
    {
        StringBuilder temp = new StringBuilder("");
        temp.append(".class public " + node.className.valueString + "\n");
        temp.append(".super java/lang/Object\n\n");

        temp.append(";================================" + System.lineSeparator());
        temp.append("; default constructor" + System.lineSeparator());
        temp.append(";================================" + System.lineSeparator());
        temp.append(".method public <init>()V" + System.lineSeparator());
        temp.append("    aload 0" + System.lineSeparator());
        temp.append("    invokespecial java/lang/Object/<init>()V" + System.lineSeparator());
        temp.append("    return" + System.lineSeparator());
        temp.append(".end method" + System.lineSeparator() + System.lineSeparator());

        temp.append(";================================" + System.lineSeparator());
        temp.append("; main method" + System.lineSeparator());
        temp.append(";================================" + System.lineSeparator());
        temp.append(".method public static main([Ljava/lang/String;)V\n");
        temp.append("    .limit stack 100\n");
        temp.append("    .limit locals 100\n\n");
        node.varDeclarationNodes.forEach(varDeclarationNode -> temp.append(visit(varDeclarationNode)));
        node.statementNodes.forEach(statementNode -> temp.append(visit(statementNode)));
        temp.append("\n");
        temp.append("\n    return\n");
        temp.append(".end method");

        return temp.toString();
    }

    @Override
    public String visit(SimpleClassNode node)
    {
        return null;
    }

    @Override
    public String visit(ChildClassNode node)
    {
        return null;
    }

    @Override
    public String visit(BasicMethodNode node)
    {
        return null;
    }

    @Override
    public String visit(OverloadMethodNode node)
    {
        return null;
    }

    @Override
    public String visit(ParameterNode node)
    {
        return null;
    }

    @Override
    public String visit(VarDeclarationNode node)
    {
        StringBuilder temp = new StringBuilder();
        variables.put(node.varName.valueString, variables.size());
        temp.append("    ldc 0" + commentSpaces + "   ; " + node.varName.valueString + " is being initialized and set to zero/false" + System.lineSeparator());
        temp.append("    istore " + (variables.size() - 1) + commentSpaces + "; Saving variable in locals" + System.lineSeparator());
        return temp.toString();
    }

    @Override
    public String visit(BooleanLiteralNode node)
    {
        StringBuilder temp = new StringBuilder();
        if (node.variablesValue != null)
            temp.append("    ldc " + ((node.variablesValue.getText().equals("false")) ? "0" : "1") + commentSpaces + "   ; Loading in boolean constant(" + node.variablesValue.getText() + ")" + System.lineSeparator());
        return temp.toString();
    }

    @Override
    public String visit(IdLiteralNode node)
    {
        return node.valueString + System.lineSeparator();
    }

    @Override
    public String visit(IntLiteralNode node)
    {
        StringBuilder temp = new StringBuilder();
        temp.append("    ldc " + node.value.getText() + commentSpaces + "   ; Loading int constant" + System.lineSeparator());
        return temp.toString();
    }

    @Override
    public String visit(ArrayAssignAssertNode node)
    {
        return null;
    }

    @Override
    public String visit(AssignAssertNode node)
    {
        StringBuilder temp = new StringBuilder();
        temp.append(visit(node.expression));
        temp.append("    istore " + variables.get(node.varName.valueString)
                + commentSpaces
                + "; Storing item into " + node.varName.valueString
                + System.lineSeparator());
        return temp.toString();
    }

    @Override
    public String visit(PrintAssertNode node)
    {
        StringBuilder temp = new StringBuilder();
        temp.append(System.lineSeparator() + "    getstatic java/lang/System/out Ljava/io/PrintStream;" + System.lineSeparator());
        temp.append(visit(node.expression));
        temp.append("    invokevirtual java/io/PrintStream/println(I)V" + System.lineSeparator());
        return temp.toString();
    }

    @Override
    public String visit(AndConditionNode node)
    {
        StringBuilder temp = new StringBuilder();
        temp.append(visit(node.leftCondition));
        if (nestedCount >= 0)
            temp.append("    ifeq nested_" + nestedCount + commentSpaces.substring(5)
                    + "; Check if the conditional is true or false" + System.lineSeparator());
        else
            temp.append("    ifeq else_" + elseCount + commentSpaces.substring(3)
                + "; Compare the two boolean expression to make sure they are both either true or false" + System.lineSeparator());

        temp.append(visit(node.rightCondition));
        if (nestedCount >= 0)
        {
            temp.append("    ifeq nested_" + nestedCount + commentSpaces.substring(5)
                    + "; Check if the conditional is true or false" + System.lineSeparator());

            temp.append("    ldc 1" + commentSpaces + "   ; Literal true given on successful pass of above conditionals" + System.lineSeparator()
                    + "    goto nfinally_" + nFinallyCount + System.lineSeparator()
                    + "nested_" + (nestedCount--) + ":" + System.lineSeparator()
                    + "    ldc 0" + commentSpaces + "   ; Literal true given on successful pass of above conditionals" + System.lineSeparator()
                    + "nfinally_" + (nFinallyCount--) + ":" + System.lineSeparator());
        }
        else
        {
//            temp.append("    ifeq else_" + elseCount + commentSpaces.substring(3)
//                    + "; Check if the conditional is true or false" + System.lineSeparator());

            temp.append("    ldc 1" + commentSpaces + "   ; Literal true given on successful pass of above conditionals" + System.lineSeparator()
                    + "    goto finally_" + finallyCount + System.lineSeparator()
                    + "else_" + elseCount + ":" + System.lineSeparator()
                    + "    ldc 0" + commentSpaces + "   ; Literal true given on successful pass of above conditionals" + System.lineSeparator()
                    + "finally_" + finallyCount + ":" + System.lineSeparator());
        }
        return temp.toString();
    }

    @Override
    public String visit(LessThanConditionNode node)
    {
        StringBuilder temp = new StringBuilder();
        temp.append(visit(node.leftCondition));
        temp.append(visit(node.rightCondition));
        if (nestedCount >= 0)
        {
            temp.append("    if_icmpge nested_" + nestedCount + commentSpaces.substring(10)
                    + "; Comparing top two elements on the stack" + System.lineSeparator());

            temp.append("    ldc 1" + commentSpaces + "   ; Literal true given on successful pass of above conditional" + System.lineSeparator()
                    + "    goto nfinally_" + nFinallyCount + System.lineSeparator()
                    + "nested_" + (nestedCount--) + ":" + System.lineSeparator()
                    + "    ldc 0" + commentSpaces + "   ; Literal true given on successful pass of above conditionals" + System.lineSeparator()
                    + "nfinally_" + (nFinallyCount--) + ":" + System.lineSeparator());
        }
        else
        {
//            temp.append("    if_icmpge else_" + (elseCount+1) + commentSpaces.substring(8)
//                    + "; Comparing top two elements on the stack" + System.lineSeparator());

            temp.append("    ldc 1" + commentSpaces + "   ; Literal true given on successful pass of above conditional" + System.lineSeparator()
                    + "    goto finally_" + finallyCount + System.lineSeparator()
                    + "else_" + elseCount + ":" + System.lineSeparator()
                    + "    ldc 0" + commentSpaces + "   ; Literal true given on successful pass of above conditionals" + System.lineSeparator()
                    + "finally_" + finallyCount + ":" + System.lineSeparator());
        }
        return temp.toString();
    }

    @Override
    public String visit(NotConditionNode node)
    {
        StringBuilder temp = new StringBuilder();
        temp.append(visit(node.condition));
        if (nestedCount >= 0)
            temp.append("    ifne nested_" + nestedCount + commentSpaces.substring(5) + "; Not the boolean expression" + System.lineSeparator());
        else
            temp.append("    ifne else_" + elseCount + commentSpaces.substring(3) + "; Not the boolean expression" + System.lineSeparator());
        return temp.toString();
    }

    @Override
    public String visit(NestedConditionNode node)
    {
        StringBuilder temp = new StringBuilder();
        nestedCount++;
        nFinallyCount++;
        temp.append(visit(node.condition));
        return temp.toString();
    }

    @Override
    public String visit(IfBranchNode node)
    {
        StringBuilder temp = new StringBuilder();
        if (node.condition instanceof BooleanLiteralNode)
        {
            if (((BooleanLiteralNode) node.condition).variablesValue.getText().equals("true"))
                temp.append(visit(node.ifStatement));
            else if (node.thenStatement != null)
                temp.append(visit(node.thenStatement));
            return temp.toString();
        }

        temp.append(visit(node.condition));
        if (node.condition instanceof ObjectRefAtomNode || node.condition instanceof NestedConditionNode)
            temp.append("    ifeq else_" + elseCount + System.lineSeparator());
        temp.append(visit(node.ifStatement));
        if (node.thenStatement != null)
            temp.append("    goto finally_" + finallyCount + System.lineSeparator());
        temp.append("  else_" + (elseCount++) + ":" + System.lineSeparator());
        if (node.thenStatement != null)
        {
            temp.append(visit(node.thenStatement));
            temp.append("  finally_" + (finallyCount++) + ":" + System.lineSeparator());
        }
        return temp.toString();
    }

    @Override
    public String visit(LoopBranchNode node)
    {
        StringBuilder temp = new StringBuilder();
        temp.append("finally_" + finallyCount + ":" + System.lineSeparator());
        temp.append(visit(node.condition));
        if (node.condition instanceof ObjectRefAtomNode || node.condition instanceof NestedConditionNode)
            temp.append("    ifeq else_" + elseCount + System.lineSeparator());
        temp.append(visit(node.statement));
        temp.append("    goto finally_" + finallyCount + System.lineSeparator());
        temp.append("  else_" + (elseCount++) + ":" + System.lineSeparator());
        finallyCount++;
        return temp.toString();
    }

    @Override
    public String visit(ScopeBranchNode node)
    {
        StringBuilder temp = new StringBuilder();
        nestedCount++;
        nFinallyCount++;
        node.statementNodes.forEach(statementNode -> temp.append(visit(statementNode)));
        return temp.toString();
    }

    @Override
    public String visit(InstatiateAtomNode node)
    {
        return null;
    }

    @Override
    public String visit(NewIntArrayAtomNode node)
    {
        return null;
    }

    @Override
    public String visit(ParenExprAtomNode node)
    {
        return null;
    }

    @Override
    public String visit(RefThisAtomNode node)
    {
        return null;
    }

    @Override
    public String visit(ObjectRefAtomNode node)
    {
        StringBuilder temp = new StringBuilder();
        if (!node.methodName.isPresent())
            temp.append("    iload " + variables.get(node.varName.valueString) + commentSpaces + " ; Getting " + node.varName.valueString + "'s value from local pool" + System.lineSeparator());
        return temp.toString();
    }

    @Override
    public String visit(MinusMathNode node)
    {
        StringBuilder temp = new StringBuilder();
        temp.append(visit(node.leftMathNode));
        temp.append(visit(node.rightMathNode));
        temp.append("    isub" + commentSpaces + "    ; Subtracting top elements on stack" + System.lineSeparator());
        return temp.toString();
    }

    @Override
    public String visit(MultMathNode node)
    {
        StringBuilder temp = new StringBuilder();
        temp.append(visit(node.leftMathNode));
        temp.append(visit(node.rightMathNode));
        temp.append("    imul" + commentSpaces + "    ; Multiplying top elements on stack" + System.lineSeparator());
        return temp.toString();
    }

    @Override
    public String visit(PlusMathNode node)
    {
        StringBuilder temp = new StringBuilder();
        temp.append(visit(node.leftMathNode));
        temp.append(visit(node.rightMathNode));
        temp.append("    iadd" + commentSpaces + "    ; Adding top elements on stack" + System.lineSeparator());
        return temp.toString();
    }

    @Override
    public String visit(ArrayAccessExprNode node)
    {
        return null;
    }

    @Override
    public String visit(ArrayLengthExprNode node)
    {
        return null;
    }

    @Override
    public String visit(CalcExprNode node)
    {
        return null;
    }

    @Override
    public String visit(MethodCallExprNode node)
    {
        return null;
    }

    @Override
    public String visit(TrailingExprNode node)
    {
        return null;
    }
}
