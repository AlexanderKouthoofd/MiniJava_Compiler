"C:\Program Files\Java\jdk1.8.0_73\bin\java" -Didea.launcher.port=7536 "-Didea.launcher.bin.path=C:\Program Files (x86)\JetBrains\IntelliJ IDEA Community Edition 15.0.3\bin" -Dfile.encoding=UTF-8 -classpath "C:\Program Files\Java\jdk1.8.0_73\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\deploy.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\ext\access-bridge-64.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\ext\cldrdata.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\ext\dnsns.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\ext\jaccess.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\ext\jfxrt.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\ext\localedata.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\ext\nashorn.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\ext\sunec.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\ext\sunjce_provider.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\ext\sunmscapi.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\ext\sunpkcs11.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\ext\zipfs.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\javaws.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\jfxswt.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\management-agent.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\plugin.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_73\jre\lib\rt.jar;C:\Users\alex\.gradle;C:\Users\alex\Coding\CSC459\JBDC\mysqlconnect.jar;C:\Users\alex\Documents\GitHub\JFoenix\jfoenix.jar;C:\Users\alex\Documents\Intelli\mockito-all-1.10.19.jar;C:\Users\alex\Coding\CSC455\Asteroids\asteroidsfw.jar;C:\Users\alex\Coding\CSC444\MyCompiler\Compiler\out\production\MyMiniJavaCompiler;C:\Users\alex\Coding\CSC444\MyCompiler\Compiler\out\jars\antlr.jar;C:\Users\alex\Coding\CSC444\MyCompiler\Compiler\out\jars\jasmin.jar;C:\Program Files (x86)\JetBrains\IntelliJ IDEA Community Edition 15.0.3\lib\idea_rt.jar" com.intellij.rt.execution.application.AppMain my.mini.java.compiler.Main
[Scope Flag, String[] a]
[]
[Scope Flag, int Age]
[Scope Flag, int Age, int Salary]
[Scope Flag, int Age, int Salary, boolean Married]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, int v_Age]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, int v_Age, int v_Salary]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, int v_Age, int v_Salary, boolean v_Married]
[Scope Flag, int Age, int Salary, boolean Married]
[Scope Flag, int Age, int Salary, boolean Married]
[Scope Flag, int Age, int Salary, boolean Married]
[Scope Flag, int Age, int Salary, boolean Married]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, Element other]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, Element other, boolean ret_val]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, Element other, boolean ret_val, int aux01]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, Element other, boolean ret_val, int aux01, int aux02]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, Element other, boolean ret_val, int aux01, int aux02, int nt]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, Element other, boolean ret_val, int aux01, int aux02, int nt]
[Scope Flag, int Age, int Salary, boolean Married]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, int num1]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, int num1, int num2]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, int num1, int num2, boolean retval]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, int num1, int num2, boolean retval, int aux02]
[Scope Flag, int Age, int Salary, boolean Married]
[]
[Scope Flag, Element elem]
[Scope Flag, Element elem, List next]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element v_elem]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element v_elem, List v_next]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element v_elem, List v_next, boolean v_end]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element new_elem]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element new_elem, boolean ret_val]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element new_elem, boolean ret_val, List aux03]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element new_elem, boolean ret_val, List aux03, List aux02]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, List v_next]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem, int aux04]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem, int aux04, int nt]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem, int aux04, int nt, Scope Flag, Scope Flag]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem, int aux04, int nt, Scope Flag, Scope Flag]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem, int aux04, int nt, Scope Flag]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem, int aux04, int nt, Scope Flag]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem, int aux04, int nt]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, int int_ret_val]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, int int_ret_val, List aux01]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, int int_ret_val, List aux01, Element var_elem]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, int int_ret_val, List aux01, Element var_elem, boolean var_end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, int int_ret_val, List aux01, Element var_elem, boolean var_end, int nt]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, int int_ret_val, List aux01, Element var_elem, boolean var_end, int nt, Scope Flag]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, int int_ret_val, List aux01, Element var_elem, boolean var_end, int nt]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, List aux01]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, List aux01, boolean var_end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, List aux01, boolean var_end, Element var_elem]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, List aux01, boolean var_end, Element var_elem]
[Scope Flag, Element elem, List next, boolean end]
[]
[Scope Flag, Scope Flag, List head]
[Scope Flag, Scope Flag, List head, List last_elem]
[Scope Flag, Scope Flag, List head, List last_elem, boolean aux01]
[Scope Flag, Scope Flag, List head, List last_elem, boolean aux01, Element el01]
[Scope Flag, Scope Flag, List head, List last_elem, boolean aux01, Element el01, Element el02]
[Scope Flag, Scope Flag, List head, List last_elem, boolean aux01, Element el01, Element el02, Element el03]
[Scope Flag]
[]



[Scope Flag, String[] a]
[]
[Scope Flag, int Age]
[Scope Flag, int Age, int Salary]
[Scope Flag, int Age, int Salary, boolean Married]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, int v_Age]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, int v_Age, int v_Salary]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, int v_Age, int v_Salary, boolean v_Married]
[Scope Flag, int Age, int Salary, boolean Married]
[Scope Flag, int Age, int Salary, boolean Married]
[Scope Flag, int Age, int Salary, boolean Married]
[Scope Flag, int Age, int Salary, boolean Married]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, Element other]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, Element other, boolean ret_val]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, Element other, boolean ret_val, int aux01]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, Element other, boolean ret_val, int aux01, int aux02]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, Element other, boolean ret_val, int aux01, int aux02, int nt]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, Element other, boolean ret_val, int aux01, int aux02, int nt]
[Scope Flag, int Age, int Salary, boolean Married]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, int num1]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, int num1, int num2]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, int num1, int num2, boolean retval]
[Scope Flag, int Age, int Salary, boolean Married, Scope Flag, int num1, int num2, boolean retval, int aux02]
[Scope Flag, int Age, int Salary, boolean Married]
[]
[Scope Flag, Element elem]
[Scope Flag, Element elem, List next]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element v_elem]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element v_elem, List v_next]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element v_elem, List v_next, boolean v_end]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element new_elem]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element new_elem, boolean ret_val]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element new_elem, boolean ret_val, List aux03]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element new_elem, boolean ret_val, List aux03, List aux02]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, List v_next]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem, int aux04]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem, int aux04, int nt]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem, int aux04, int nt, Scope Flag, Scope Flag]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem, int aux04, int nt, Scope Flag, Scope Flag]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem, int aux04, int nt, Scope Flag]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem, int aux04, int nt, Scope Flag]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, List my_head, boolean ret_val, boolean aux05, List aux01, List prev, boolean var_end, Element var_elem, int aux04, int nt]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, int int_ret_val]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, int int_ret_val, List aux01]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, int int_ret_val, List aux01, Element var_elem]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, int int_ret_val, List aux01, Element var_elem, boolean var_end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, int int_ret_val, List aux01, Element var_elem, boolean var_end, int nt]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, int int_ret_val, List aux01, Element var_elem, boolean var_end, int nt, Scope Flag]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, Element e, int int_ret_val, List aux01, Element var_elem, boolean var_end, int nt]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, List aux01]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, List aux01, boolean var_end]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, List aux01, boolean var_end, Element var_elem]
[Scope Flag, Element elem, List next, boolean end, Scope Flag, List aux01, boolean var_end, Element var_elem]
[Scope Flag, Element elem, List next, boolean end]
[]
[Scope Flag, Scope Flag, List head]
[Scope Flag, Scope Flag, List head, List last_elem]
[Scope Flag, Scope Flag, List head, List last_elem, boolean aux01]
[Scope Flag, Scope Flag, List head, List last_elem, boolean aux01, Element el01]
[Scope Flag, Scope Flag, List head, List last_elem, boolean aux01, Element el01, Element el02]
[Scope Flag, Scope Flag, List head, List last_elem, boolean aux01, Element el01, Element el02, Element el03]
[Scope Flag]
[]
my.mini.java.compiler.AST.nodes.classes.MainClassNode@34340fab

Process finished with exit code 0



int temp = ++elseCount;
        visit(node.leftCondition);
        visit(node.rightCondition);
        program.append("    if_icmpge else_")
				.append(temp)
				.append(commentSpaces.substring(8))
				.append("; Comparing top two elements on the stack")
				.append(System.lineSeparator())
				.append("    ldc 1")
				.append(commentSpaces)
				.append("   ; Literal true given on successful pass of above conditional")
				.append(System.lineSeparator())
				.append("    goto finally_")
				.append(temp)
				.append(System.lineSeparator())
				.append("else_")
				.append(temp)
				.append(":")
				.append(System.lineSeparator())
				.append("    ldc 0")
				.append(commentSpaces)
				.append("   ; Literal true given on successful pass of above conditionals")
				.append(System.lineSeparator())
				.append("finally_")
				.append(temp)
				.append(":")
				.append(System.lineSeparator());
        return null;


        int temp = ++elseCount;
                visit(node.leftCondition);
                program.append("    ifeq else_")
        				.append(temp)
        				.append(commentSpaces)
        				.append(" ; Compare the two boolean expression to make sure they are both either true or false")
        				.append(System.lineSeparator());
                visit(node.rightCondition);
                program.append("    ifeq else_")
        				.append(temp)
        				.append(commentSpaces)
        				.append(" ; Check if the conditional is true or false")
        				.append(System.lineSeparator());

                program.append("    ldc 1")
        				.append(commentSpaces)
        				.append("   ; Literal true given on successful pass of above conditionals")
        				.append(System.lineSeparator())
        				.append("    goto finally_")
        				.append(temp)
        				.append(System.lineSeparator())
        				.append("else_")
        				.append(temp)
        				.append(":")
        				.append(System.lineSeparator())
        				.append("    ldc 0")
        				.append(commentSpaces)
        				.append("   ; Literal true given on successful pass of above conditionals")
        				.append(System.lineSeparator())
        				.append("finally_")
        				.append(temp)
        				.append(":")
        				.append(System.lineSeparator());
                return null;